sd<-rep(0,n)
x.stp.num<-rep(0,n)
x.complete.stp.num<-rep(0,n)
prop_uat<-rep(0,n)
dichot.m<-rep(0,n)
N.stp.num<-N-sum(binom.stp.num)
data.stp<-list(N=n,Unclassified=Unclassified,binom.stp.num=binom.stp.num,N.stp.num=N.stp.num,
x.stp.num=numstp,idno.stp.num=idsnum,stp.num.count=stp.num.count,
x.complete.stp.num=x.complete.stp.num,m.stp.num=binom.stp.num,n.stp.num=n.stp.num,
dichot.m=dichot.m)
dput(data.stp, file="data.txt")
#return(data.stp)
}
gendata(350,0.05,0.74,0.24,1.36,1.08,0.21,0.09,0.7,0.9)
?lrm
library(rms)
?lrm
#packageurl <- "http://cran.r-project.org/src/contrib/Archive/knitr/knitr_1.12.tar.gz"
#install.packages(packageurl, repos=NULL, type="source")
library(knitr)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(Hmisc)
library(R306)
library(dplyr)
library(lubridate)
library(reshape2)
library(ggplot2)
library(scales)
library(Lmisc)
library(car)
library(zoo)
load(file.path("data_mg", "Rdata_mg", "derive_data_mg.Rdata"))
tmp<- merge(merge(dm, dplyr::select(me, subjid, magnesium), by="subjid", all.x=TRUE), dplyr::select(cm, subjid, serotype), by = "subjid", all.x=TRUE)
library(matching42DX)
matching42DX:::launch_matcher_adm()
250 * 30
7500 + 750 + 1200 + 500 + 2400 + 2500 + 2000 + 1000 + 600 + 7500 + 500
26450 - 800
250 x 300
250 * 300
600 * 300
10000/5
4000 * 18
150000 + 75000 + 50000 + 80000 + 180000 + 24000 + 120000 + 72000 + 18000
18 * 5
150000 + 75000 + 50000 + 80000 + 180000 + 24000 + 120000 + 72000 + 18000 + 90000
150000 + 75000 + 50000 + 80000 + 180000 + 24000 + 120000 + 72000 + 18000 + 90000 + 1800
180024 - (36202 + 1000 + 1000 + 5000)
(25650000 + 5200000 + 860800000)/22927
38891 + 3900
7000000/22927
306 * 18
5508/750
7000000 * 18/750
getwd()
set.seed(100)
?rbinom
p <- rbinom(n = 100, size = 10, prob = 0.4)
p
N <- 100
n <- 10
p <- rbinom(n = N, size = n, prob = 0.4)/n
p
hist(p)
tmp_binom <- function(n, N, prob) {
rbinom(n = N, size = n, prob = prob)/n
}
p10 <- tmp_binom(n = 10, N = N, prob = 0.4)
hist(p10)
p100 <- tmp_binom(n = 100, N = N, prob = 0.4)
hist(p100)
p1000 <- tmp_binom(n = 1000, N = N, prob = 0.4)
hist(p1000)
hist(p100)
p10000 <- tmp_binom(n = 10000, N = N, prob = 0.4)
hist(p10000)
p100000 <- tmp_binom(n = 100000, N = N, prob = 0.4)
hist(p100000)
p100000 <- tmp_binom(n = 100000, N = N, prob = 0.4)
hist(p100000)
hist(p10)
length(p10)
length(p100)
N <- 1000
tmp_binom <- function(n, N, prob) {
rbinom(n = N, size = n, prob = prob)/n
}
p10 <- tmp_binom(n = 10, N = N, prob = 0.4)
hist(p10)
p100 <- tmp_binom(n = 100, N = N, prob = 0.4)
hist(p100)
p100000 <- tmp_binom(n = 100000, N = N, prob = 0.4)
hist(p100000)
N <- 100
tmp_binom <- function(n, N, prob) {
rbinom(n = N, size = n, prob = prob)/n
}
set.seed(100)
p10 <- tmp_binom(n = 10, N = N, prob = 0.4)
hist(p10)
p100 <- tmp_binom(n = 100, N = N, prob = 0.4)
hist(p100)
p100000 <- tmp_binom(n = 100000, N = N, prob = 0.4)
hist(p100000)
p1000000 <- tmp_binom(n = 1000000, N = N, prob = 0.4)
hist(p1000000)
N <- 100
tmp_binom <- function(n, N, prob) {
cbind(n = n, mean = rbinom(n = N, size = n, prob = prob)/n)
}
set.seed(100)
p10 <- tmp_binom(n = 10, N = N, prob = 0.4)
p10
p <- sapply(c(1:100), tmp_binom(n = x, N = N, prob = 0.4))
p <- sapply(c(1:100), function(x) tmp_binom(n = x, N = N, prob = 0.4))
dim(p)
View(p)
p <- do.call(rbind, lapply(c(1:100), function(x) tmp_binom(n = x, N = N, prob = 0.4)))
dim(p)
library(ggplot2)
ggplot(data = p, aes(x = mean)) + geom_histogram() + facet_wrap(~ n)
p <- as.data.frame(do.call(rbind, lapply(c(1:100), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) + geom_histogram() + facet_wrap(~ n)
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 10, 100, 1000), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) + geom_histogram() + facet_wrap(~ n)
p <- as.data.frame(do.call(rbind, lapply(c(1, 5, 10, 100, 1000), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) + geom_histogram() + facet_wrap(~ n)
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..)) +
geom_line(aes(y = ..density..), stat = 'density') +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..)) +
geom_density() +
facet_wrap(~ n) +
theme_bw()
p <- as.data.frame(do.call(rbind, lapply(c(1, 10, 100, 1000, 10000), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..)) +
geom_density() +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..))
ggplot(diamonds, aes(price, ..density.., colour = cut)) +
geom_freqpoly(binwidth = 500)
ggplot(data = subset(p, n = 1), aes(x = mean)) +
geom_histogram(aes(y = ..density..))
subset(p, n = 1)
head(p)
ggplot(data = subset(p, n == 1), aes(x = mean)) +
geom_histogram(aes(y = ..density..))
table(subset(p, n == 1))
ggplot(data = subset(p, n == 1), aes(x = mean)) +
geom_histogram(aes(y = ..density..)) +
geom_density()
set.seed(1234)
dat <- data.frame(cond = factor(rep(c("A","B"), each=200)),
rating = c(rnorm(200),rnorm(200, mean=.8)))
ggplot(dat, aes(x=rating)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data = subset(p, n == 1), aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 1) +
geom_density()
ggplot(data = subset(p, n == 1), aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5) +
geom_density()
ggplot(data = subset(p, n == 1), aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1)
ggplot(data = subset(p, n == 1), aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
geom_density()
ggplot(data = subset(p, n == 1), aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
geom_bar()
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
geom_bar() +
facet_wrap(~ n) +
theme_bw()
tmp_binom <- function(n, N, prob) {
cbind(n = n, mean = round(rbinom(n = N, size = n, prob = prob)/n, 2))
}
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 10, 100, 1000, 10000), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
geom_bar() +
facet_wrap(~ n) +
theme_bw()
tmp_binom <- function(n, N, prob) {
cbind(n = n, mean = round(rbinom(n = N, size = n, prob = prob)/n, 1))
}
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 10, 100, 1000, 10000, 100000), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
geom_bar() +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 2, 5, 10, 50, 100), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
geom_density() +
#geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
tmp_binom <- function(n, N, prob) {
cbind(n = n, mean = rbinom(n = N, size = n, prob = prob)/n)
}
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 2, 5, 10, 50, 100), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 0.01) +
geom_density() +
#geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
geom_density() +
#geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 0.01) +
geom_density() +
#geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
N <- 100
tmp_binom <- function(n, N, prob) {
cbind(n = n, mean = round(rbinom(n = N, size = n, prob = prob)/n, 1))
}
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 2, 5, 10, 50, 100), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
geom_density() +
#geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
geom_histogram(binwidth = 0.1) +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
#geom_histogram(binwidth = 0.1) +
geom_bar() +
xlab("Tỷ lệ % nữ") + ylab("Tần số") +
facet_wrap(~ n) +
theme_bw()
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
#geom_histogram(binwidth = 0.1) +
geom_bar(width = 0.1) +
xlab("Tỷ lệ % nữ") + ylab("Tần số") +
facet_wrap(~ n) +
theme_bw()
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 5, 100), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
#geom_histogram(binwidth = 0.1) +
geom_bar(width = 0.1) +
xlab("Tỷ lệ % nữ") + ylab("Tần số") +
facet_grid(~ n) +
theme_bw()
set.seed(100)
p <- as.data.frame(do.call(rbind, lapply(c(1, 5, 10, 100), function(x) tmp_binom(n = x, N = N, prob = 0.4))))
ggplot(data = p, aes(x = mean)) +
#geom_histogram(aes(y = ..density..), binwidth = 0.1) +
#geom_density() +
#geom_histogram(binwidth = 0.1) +
geom_bar(width = 0.1) +
xlab("Tỷ lệ % nữ") + ylab("Tần số") +
facet_grid(~ n) +
theme_bw()
getwd(
)
install.packages("sas7bdat")
install.packages("nonrandom")
library(nonrandom)
data("pride")
?pride
pride$PCR_RSV <- factor(pride$PCR_RSV, levels = c(0,1), labels = c("No current RSV", "Current RSV"))
pride$SEVERE <- factor(pride$SEVERE, levels = c(0,1), labels = c("No severe LRTI", "Severe LRTI"))
library(dplyr)
library(Hmisc)
describe(pride$SEX)
with(pride, c(mean = mean(AGE), sd = sd(AGE), min = min(AGE), med = median(AGE), max = max(AGE)))
with(pride, prop.table(table(PCR_RSV, SEX), 1))
with(pride, prop.table(table(PCR_RSV, TOBACCO), 1))
psmodel <- glm(PCR_RSV ~ AGE + SEX + as.factor(ETHNO) + PRETERM + RSVINF + CHD + as.factor(REGION)
+ SIBLING + TOBACCO + EXT + PARATOP + as.factor(SUMDIAG),
family = binomial(logit), data = pride)
names(pride)
psmodel <- glm(PCR_RSV ~ AGE + SEX + as.factor(ETHNO) + FRUEHG + RSVINF + HERZ + as.factor(REGION)
+ EINZ + TOBACCO + EXT + ELTATOP + as.factor(KRANKSUM),
family = binomial(logit), data = pride)
pride$ps <-  psmodel$fitted.values
summary(pride$ps)
ggplot(pride, aes(x=ps, fill=PCR_RSV)) + geom_histogram(bins=20, alpha=.5, position="identity")
ggplot(pride, aes(PCR_RSV, ps))  + geom_boxplot()
pride$ipw[as.numeric(pride$PCR_RSV) == 2] <- 1/(pride$ps[as.numeric(pride$PCR_RSV) == 2])
pride$ipw[as.numeric(pride$PCR_RSV) == 1] <- 1/(1-pride$ps[as.numeric(pride$PCR_RSV) == 1])
ggplot(pride, aes(ps, colour=PCR_RSV,weight=ipw)) + geom_density()
varsToFactor <- c("SEX", "ETHNO", "PRETERM", "RSVINF", "CHD", "REGION",
"SIBLING", "TOBACCO", "EXT", "PARATOP", "SUMDIAG")
pride[varsToFactor] <- lapply(pride[varsToFactor], factor)
psmodel
varsToFactor <- c("SEX", "ETHNO", "FRUEHG", "RSVINF", "HERZ", "REGION", "EINZ", "TOBACCO", "EXT", "ELTATOP", "KRANKSUM")
pride[varsToFactor] <- lapply(pride[varsToFactor], factor)
vars <- c("SEX", "ETHNO", "FRUEHG", "RSVINF", "HERZ", "REGION", "EINZ", "TOBACCO", "EXT", "ELTATOP", "KRANKSUM")
tab_orig <- CreateTableOne(vars=vars, strata="PCR_RSV", data=pride, test=FALSE)
??CreateTableOne
install.packages("tableone")
library(tableone)
tab_orig <- CreateTableOne(vars=vars, strata="PCR_RSV", data=pride, test=FALSE)
tab_orig
prideSVY <- svydesign(ids= ~1, data=pride, weights = ~ipw)
??svydesign
install.packages("survey")
library(nonrandom)
data("pride")
pride$PCR_RSV <- factor(pride$PCR_RSV, levels = c(0,1), labels = c("No current RSV", "Current RSV"))
pride$SEVERE <- factor(pride$SEVERE, levels = c(0,1), labels = c("No severe LRTI", "Severe LRTI"))
library(dplyr)
library(Hmisc)
with(pride, c(mean = mean(AGE), sd = sd(AGE), min = min(AGE), med = median(AGE), max = max(AGE)))
with(pride, prop.table(table(PCR_RSV, SEX), 1))
with(pride, prop.table(table(PCR_RSV, TOBACCO), 1))
psmodel <- glm(PCR_RSV ~ AGE + SEX + as.factor(ETHNO) + FRUEHG + RSVINF + HERZ + as.factor(REGION)
+ EINZ + TOBACCO + EXT + ELTATOP + as.factor(KRANKSUM),
family = binomial(logit), data = pride)
pride$ps <-  psmodel$fitted.values
summary(pride$ps)
ggplot(pride, aes(x=ps, fill=PCR_RSV)) + geom_histogram(bins=20, alpha=.5, position="identity")
ggplot(pride, aes(PCR_RSV, ps))  + geom_boxplot()
pride$ipw[as.numeric(pride$PCR_RSV) == 2] <- 1/(pride$ps[as.numeric(pride$PCR_RSV) == 2])
pride$ipw[as.numeric(pride$PCR_RSV) == 1] <- 1/(1-pride$ps[as.numeric(pride$PCR_RSV) == 1])
ggplot(pride, aes(ps, colour = PCR_RSV, weight = ipw)) + geom_density()
varsToFactor <- c("SEX", "ETHNO", "FRUEHG", "RSVINF", "HERZ", "REGION", "EINZ", "TOBACCO", "EXT", "ELTATOP", "KRANKSUM")
pride[varsToFactor] <- lapply(pride[varsToFactor], factor)
vars <- c("SEX", "ETHNO", "FRUEHG", "RSVINF", "HERZ", "REGION", "EINZ", "TOBACCO", "EXT", "ELTATOP", "KRANKSUM")
library(tableone)
tab_orig <- CreateTableOne(vars=vars, strata="PCR_RSV", data=pride, test=FALSE)
prideSVY <- svydesign(ids= ~1, data=pride, weights = ~ipw)
library(survey)
prideSVY <- svydesign(ids= ~1, data=pride, weights = ~ipw)
tab_ipw <- svyCreateTableOne(vars=vars, strata="PCR_RSV", data=prideSVY, test=FALSE)
print(tab_orig, smd=TRUE)
print(tab_ipw, smd=TRUE)
?CreateTableOne
print(tab_orig, smd=TRUE)
print(tab_ipw, smd=TRUE)
ride_plot<-data.frame(variable = labels(ExtractSmd(tab_orig))[[1]],
original = ExtractSmd(tab_orig),
weighted = ExtractSmd(tab_ipw))
colnames(pride_plot) <- c("variable", "original", "weighted")
ride_plot<-data.frame(variable = labels(ExtractSmd(tab_orig))[[1]],
original = ExtractSmd(tab_orig),
weighted = ExtractSmd(tab_ipw))
pride_plot<-data.frame(variable = labels(ExtractSmd(tab_orig))[[1]],
original = ExtractSmd(tab_orig),
weighted = ExtractSmd(tab_ipw))
colnames(pride_plot) <- c("variable", "original", "weighted")
pride_plotMELT <- melt(data=pride_plot, id.vars = c("variable"),
variable.name = "Method", value.name = "StDiff")
pride_plotMELT <- reshape::melt(data=pride_plot, id.vars = c("variable"),
variable.name = "Method", value.name = "StDiff")
ggplot(data=pride_plotMELT, mapping = aes(x=variable, y=StDiff,
group = Method, colour=Method))  +
geom_line() + geom_point() + coord_flip()
pride_plotMELT <- reshape2::melt(data=pride_plot, id.vars = c("variable"),
variable.name = "Method", value.name = "StDiff")
ggplot(data=pride_plotMELT, mapping = aes(x=variable, y=StDiff,
group = Method, colour=Method))  +
geom_line() + geom_point() + coord_flip()
pride$SEVEREBinary <- 0
pride$SEVEREBinary[pride$SEVERE == "Severe LRTI"] <- 1
unadj <- glm(SEVEREBinary ~ as.factor(PCR_RSV),
family=binomial(link="identity"), data=pride)
alladj <- glm(SEVEREBinary ~ as.factor(PCR_RSV) + AGE + SEX + as.factor(ETHNO) + FRUEHG + RSVINF + HERZ + as.factor(REGION)
+ EINZ + TOBACCO + EXT + ELTATOP + as.factor(KRANKSUM),
family=binomial(link="identity"), data=pride)
alladj <- glm(SEVEREBinary ~ as.factor(PCR_RSV) + AGE + SEX + as.factor(ETHNO) + FRUEHG + RSVINF + HERZ + as.factor(REGION)
+ EINZ + TOBACCO + EXT + ELTATOP + as.factor(KRANKSUM),
family=binomial(link=logit), data=pride)
alladj
install.packages("twang")
library(twang)
data("lindner")
#Generate the mortality outcome:
dead <- as.factor(lindner$sixMonthSurvive=="FALSE")
#Take a look at the exposure and the outcome:
table(lindner$abcix)
table(lindner$dead)
describe((lindner$dead))
names(lindner)
#Generate the mortality outcome:
lindner$dead <- as.factor(lindner$sixMonthSurvive=="FALSE")
table(lindner$dead)
prop_model <- glm(abcix~ height+ as.factor(stent) + as.factor(female)
+ as.factor(diabetic) + as.factor(acutemi)
+ ejecfrac + ves1proc, data=lindner, family=binomial)
#Generate inverse probability of treatment weights:
lindner$ps <- prop_model$fitted.values
#Investigate propensity score distribution: consider the overlap of propensity
#scores in exposed and unexposed groups
summary(lindner$ps)
ggplot(lindner, aes(x=ps, fill=as.factor(abcix))) + geom_histogram(bins=20, alpha=.5, position="identity")
ggplot(lindner, aes(x=ps, fill=as.factor(abcix))) + geom_histogram(bins=20, alpha=.5, position="identity")
ggplot(lindner, aes(as.factor(abcix), ps))  + geom_boxplot()
#2a. Calculate inverse probability of treatment (abciximab)
#weights (IP(T)W) and investigate these weights, and compare estimated
#propensity scores within the weighted sample.
lindner$iptw <- lindner$abcix/lindner$ps+(1-lindner$abcix)/(1-lindner$ps)
ggplot(lindner, aes(ps, colour=as.factor(abcix),weight=iptw)) + geom_density()
varsToFactor <- c("female", "diabetic", "acutemi", "stent")
lindner[varsToFactor] <- lapply(lindner[varsToFactor], factor)
vars <- c("stent", "height", "female", "diabetic", "acutemi",
"ejecfrac", "ves1proc")
tab_orig <- CreateTableOne(vars=vars, strata="abcix", data=lindner, test=FALSE)
##weighted data
lindnerSVY <- svydesign(ids= ~1, data=lindner, weights = ~iptw)
tab_ipw <- svyCreateTableOne(vars=vars, strata="abcix", data=lindnerSVY, test=FALSE)
print(tab_orig, smd=TRUE)
print(tab_ipw, smd=TRUE)
lindner_plot<-data.frame(variable = labels(ExtractSmd(tab_orig))[[1]],
original = ExtractSmd(tab_orig),
weighted = ExtractSmd(tab_ipw))
colnames(lindner_plot) <- c("variable", "original", "weighted")
lindner_plotMELT <- melt(data=lindner_plot, id.vars = c("variable"),
variable.name = "Method", value.name = "StDiff")
ggplot(data=lindner_plotMELT, mapping = aes(x=variable, y=StDiff,
group = Method, colour=Method))  +
geom_line() + geom_point() + coord_flip()
lindner_plot<-data.frame(variable = labels(ExtractSmd(tab_orig))[[1]],
original = ExtractSmd(tab_orig),
weighted = ExtractSmd(tab_ipw))
colnames(lindner_plot) <- c("variable", "original", "weighted")
lindner_plotMELT <- reshape2::melt(data=lindner_plot, id.vars = c("variable"),
variable.name = "Method", value.name = "StDiff")
ggplot(data=lindner_plotMELT, mapping = aes(x=variable, y=StDiff,
group = Method, colour=Method))  +
geom_line() + geom_point() + coord_flip()
unadj <- glm(dead ~ as.factor(abcix),
family=binomial(link=log), data=lindner)
ipwadj <- glm(as.factor(dead)~as.factor(lindner$abcix), weights=iptw,
family=binomial(link=log), data=lindner)
p_A1 <- weighted.mean(lindner$abcix, lindner$iptw)
p_A0 <- 1-p_A1
#Also need P(Y=1|A=0) and P(Y=1|A=1) to calculate the relative risk
#Use the IPW regression model calculated in 3(c)
p_out <- ipwadj$fitted.values
pY_A0 <- p_out[as.factor(lindner$abcix)== 0][1]
pY_A1 <- p_out[as.factor(lindner$abcix)== 1][1]
h0 <-  p_A0 + 0.5*p_A1
h1 <- p_A0 + 0.5*p_A1
(h1*pY_A1/0.5)/(h0*pY_A0)
h0 <- p_A0 + 2*p_A1
h1 <- p_A0 + 2*p_A1
(h1/2)*pY_A1/(h0*pY_A0)
#The observed relative risk can be calculated as:
obs_rr <- pY_A1/pY_A0
#Supposing that c(0)=c(1)=obs_rr:
h0 <- p_A0 + obs_rr*p_A1
h1 <- p_A0 + obs_rr*p_A1
#Verify that the confounding function-adjusted RR returned is 1:
(h1/obs_rr)*pY_A1/(h0*pY_A0)
#Assuming the relative risk of unmeasured confounder on outcome is
#equal to the relative risk of abciximab on unmeasured confounder,
#the value required to return an adjusted RR of 1 is given by
evalue <- (1+ sqrt(1 -obs_rr))/obs_rr
#The E-value of 10 implies the following bias factor:
biasfactor <-  evalue*evalue/(evalue + evalue -1)
#Check that multiplying the observed RR by this bias factor gives an
#adjusted RR of 1:
biasfactor*obs_rr
(h1*pY_A1/0.5)/(h0*pY_A0)
source('~/Dropbox/Workspace/Projects/lampk.github.io/rmd2md.R', echo=TRUE)
rmd2md()
rmd2md()
