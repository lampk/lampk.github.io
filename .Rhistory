source('D:/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md()
source('D:/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md()
files
f <- files
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
frontMatter
statusLine <- which(substr(content, 1, 7) == 'status:')
statusLine
source('D:/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md()
rmd2md()
source('~/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md()
source('~/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md
rmd2md()
source('D:/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md()
rmd2md()
rmd2md()
my_simulate <- function(seed, n, beta1, beta2, beta3, shape_T, shape_C, scale_T, scale_C, p1, p2, p3) {
## set seed
set.seed(seed)
## simulate x1, x2, x3
x1 <- rbinom(n = n, size = 1, prob = p1)
x2 <- rbinom(n = n, size = 1, prob = p2)
x3 <- rbinom(n = n, size = 1, prob = p3)
## simulate non-censored event time
T <- rweibull(n = n, shape = shape_T, scale = scale_T * exp(-beta1 * x1 - beta2 * x2 - beta3 * x3))
## simulate non-informative censoring
C <- rweibull(n = n, shape = shape_C, scale = scale_C)
## get final simulated data
time <- pmin(T, C)
out <- data.frame(time = time,
event = as.numeric(time == T),
x1 = x1,
x2 = x2,
x3 = x3)
## return output
return(out)
}
## try to simulate data
dat <- my_simulate(seed = 100, n = 1000, beta1 = 0.01, beta2 = 0.1, beta3 = -0.5, shape_T = 1, shape_C = 1, scale_T = 0.1, scale_C = 0.5, p1 = 0.5, p2 = 0.5, p3 = 0.5)
head(dat)
sum(dat$event == 0)
dat <- my_simulate(seed = 100, n = 1000, beta1 = 0.01, beta2 = 0.1, beta3 = -0.5, shape_T = 1, shape_C = 1, scale_T = 0.1, scale_C = 0.5, p1 = 0.5, p2 = 0.5, p3 = 0.5)
sum(dat$event == 0)
dat <- my_simulate(seed = 100, n = 1000, beta1 = 0.01, beta2 = 0.1, beta3 = -0.5, shape_T = 1, shape_C = 1, scale_T = 0.1, scale_C = 0.9, p1 = 0.5, p2 = 0.5, p3 = 0.5)
sum(dat$event == 0)
dat <- my_simulate(seed = 100, n = 1000, beta1 = 0.01, beta2 = 0.1, beta3 = -0.5, shape_T = 1, shape_C = 1, scale_T = 0.1, scale_C = 2, p1 = 0.5, p2 = 0.5, p3 = 0.5)
sum(dat$event == 0)
dat <- my_simulate(seed = 100, n = 1000, beta1 = 0.01, beta2 = 0.1, beta3 = -0.5, shape_T = 1, shape_C = 1, scale_T = 0.1, scale_C = 0.1, p1 = 0.5, p2 = 0.5, p3 = 0.5)
sum(dat$event == 0)
source('~/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md()
source('~/Dropbox/Workspace2/Projects/lampk.github.io/rmd2md.R')
rmd2md()
rmd2md()
rmd2md()
install.packages(c("RISmed;", "rentrez"))
library(RISmed)
install.packages("RISmed")
library(RISmed)
fit <- EUtilsSummary("'Intelligence'[Mesh] OR  'Intelligence Tests'[Mesh]", db = "pubmed")
fit
(fit <- EUtilsSummary("'Intelligence'[Mesh] OR  'Intelligence Tests'[Mesh]", db = "pubmed"))
QueryTranslation(fit)
?QueryTranslation
QueryCount(fit)
res <- EUtilsSummary("myeloma[ti] jones[au]", retmax = 10)
res
summary(res)
summary(fit)
QueryTranslation(res)
(fit <- EUtilsSummary("Intelligence[Mesh] OR  Intelligence Tests[Mesh]", db = "pubmed"))
summary(fit)
QueryTranslation(fit)
QueryCount(fit)
summary(fit)
(fit <- EUtilsSummary("Intelligence[Mesh] OR  Intelligence Tests[Mesh]", db = "pubmed"), retmax = 200000)
(fit <- EUtilsSummary("Intelligence[Mesh] OR  Intelligence Tests[Mesh]", db = "pubmed", retmax = 200000))
(fit <- EUtilsSummary("Intelligence[Mesh] OR  Intelligence Tests[Mesh]", retmax = 200000))
(fit <- EUtilsSummary("Intelligence[Mesh] OR  Intelligence Tests[Mesh]", db = "pubmed", retmax = 1000))
n <- 100
N <- n
binom.stp.num <- rep(0, n)
N-sum(binom.stp.num)
test <- function(n) {
N <- n
binom.stp.num <- rep(0, n)
N.stp.num <- N-sum(binom.stp.num)
data.stp<-list(N=n,N.stp.num=N.stp.num)
return(data.stp)
}
test(100)
getwd()
gendata<-function(n,pi,pnull_nonstp,pnull_stp,mu_nonstp,mu_stp,sd_nonstp,sd_stp,s,c){
N<-n
Unclassified<-n
idno.stp.num<-seq(1,n)
n.stp.num<-rep(1,n)
stp<-rep(0,n)
prop<-rep(0,n)
stp.num.count<-rep(0,n)
binom.stp.num<-rep(0,n)
mu<-rep(0,n)
sd<-rep(0,n)
x.stp.num<-rep(0,n)
x.complete.stp.num<-rep(0,n)
prop_uat<-rep(0,n)
dichot.m<-rep(0,n)
N.stp.num<-N-sum(binom.stp.num)
data.stp<-list(N=n,Unclassified=Unclassified,binom.stp.num=binom.stp.num,N.stp.num=N.stp.num,
x.stp.num=numstp,idno.stp.num=idsnum,stp.num.count=stp.num.count,
x.complete.stp.num=x.complete.stp.num,m.stp.num=binom.stp.num,n.stp.num=n.stp.num,
dichot.m=dichot.m)
#dput(data.stp, file="data.txt")
return(data.stp)
}
gendata(350,0.05,0.74,0.24,1.36,1.08,0.21,0.09,0.7,0.9)
gendata<-function(n,pi,pnull_nonstp,pnull_stp,mu_nonstp,mu_stp,sd_nonstp,sd_stp,s,c){
N<-n
Unclassified<-n
idno.stp.num<-seq(1,n)
n.stp.num<-rep(1,n)
stp<-rep(0,n)
prop<-rep(0,n)
stp.num.count<-rep(0,n)
binom.stp.num<-rep(0,n)
mu<-rep(0,n)
sd<-rep(0,n)
x.stp.num<-rep(0,n)
x.complete.stp.num<-rep(0,n)
prop_uat<-rep(0,n)
dichot.m<-rep(0,n)
N.stp.num<-N-sum(binom.stp.num)
data.stp<-list(N=n,Unclassified=Unclassified,binom.stp.num=binom.stp.num,N.stp.num=N.stp.num,
x.stp.num=x.stp.num,idno.stp.num=idsnum,stp.num.count=stp.num.count,
x.complete.stp.num=x.complete.stp.num,m.stp.num=binom.stp.num,n.stp.num=n.stp.num,
dichot.m=dichot.m)
#dput(data.stp, file="data.txt")
return(data.stp)
}
gendata(350,0.05,0.74,0.24,1.36,1.08,0.21,0.09,0.7,0.9)
gendata<-function(n,pi,pnull_nonstp,pnull_stp,mu_nonstp,mu_stp,sd_nonstp,sd_stp,s,c){
N<-n
Unclassified<-n
idno.stp.num<-seq(1,n)
n.stp.num<-rep(1,n)
stp<-rep(0,n)
prop<-rep(0,n)
stp.num.count<-rep(0,n)
binom.stp.num<-rep(0,n)
mu<-rep(0,n)
sd<-rep(0,n)
x.stp.num<-rep(0,n)
x.complete.stp.num<-rep(0,n)
prop_uat<-rep(0,n)
dichot.m<-rep(0,n)
N.stp.num<-N-sum(binom.stp.num)
data.stp<-list(N=n,Unclassified=Unclassified,binom.stp.num=binom.stp.num,N.stp.num=N.stp.num,
x.stp.num=x.stp.num,idno.stp.num=idno.stp.num,stp.num.count=stp.num.count,
x.complete.stp.num=x.complete.stp.num,m.stp.num=binom.stp.num,n.stp.num=n.stp.num,
dichot.m=dichot.m)
#dput(data.stp, file="data.txt")
return(data.stp)
}
gendata(350,0.05,0.74,0.24,1.36,1.08,0.21,0.09,0.7,0.9)
gendata<-function(n,pi,pnull_nonstp,pnull_stp,mu_nonstp,mu_stp,sd_nonstp,sd_stp,s,c){
N<-n
Unclassified<-n
idno.stp.num<-seq(1,n)
n.stp.num<-rep(1,n)
stp<-rep(0,n)
prop<-rep(0,n)
stp.num.count<-rep(0,n)
binom.stp.num<-rep(0,n)
mu<-rep(0,n)
sd<-rep(0,n)
x.stp.num<-rep(0,n)
x.complete.stp.num<-rep(0,n)
prop_uat<-rep(0,n)
dichot.m<-rep(0,n)
N.stp.num<-N-sum(binom.stp.num)
data.stp<-list(N=n,Unclassified=Unclassified,binom.stp.num=binom.stp.num,N.stp.num=N.stp.num,
x.stp.num=x.stp.num,idno.stp.num=idno.stp.num,stp.num.count=stp.num.count,
x.complete.stp.num=x.complete.stp.num,m.stp.num=binom.stp.num,n.stp.num=n.stp.num,
dichot.m=dichot.m)
dput(data.stp, file="data.txt")
#return(data.stp)
}
gendata(350,0.05,0.74,0.24,1.36,1.08,0.21,0.09,0.7,0.9)
gendata<-function(n,pi,pnull_nonstp,pnull_stp,mu_nonstp,mu_stp,sd_nonstp,sd_stp,s,c){
N<-n
Unclassified<-n
idno.stp.num<-seq(1,n)
n.stp.num<-rep(1,n)
stp<-rep(0,n)
prop<-rep(0,n)
stp.num.count<-rep(0,n)
binom.stp.num<-rep(0,n)
mu<-rep(0,n)
sd<-rep(0,n)
x.stp.num<-rep(0,n)
x.complete.stp.num<-rep(0,n)
prop_uat<-rep(0,n)
dichot.m<-rep(0,n)
N.stp.num<-N-sum(binom.stp.num)
data.stp<-list(N=n,Unclassified=Unclassified,binom.stp.num=binom.stp.num,N.stp.num=N.stp.num,
x.stp.num=numstp,idno.stp.num=idsnum,stp.num.count=stp.num.count,
x.complete.stp.num=x.complete.stp.num,m.stp.num=binom.stp.num,n.stp.num=n.stp.num,
dichot.m=dichot.m)
dput(data.stp, file="data.txt")
#return(data.stp)
}
gendata(350,0.05,0.74,0.24,1.36,1.08,0.21,0.09,0.7,0.9)
?lrm
library(rms)
?lrm
#packageurl <- "http://cran.r-project.org/src/contrib/Archive/knitr/knitr_1.12.tar.gz"
#install.packages(packageurl, repos=NULL, type="source")
library(knitr)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(Hmisc)
library(R306)
library(dplyr)
library(lubridate)
library(reshape2)
library(ggplot2)
library(scales)
library(Lmisc)
library(car)
library(zoo)
load(file.path("data_mg", "Rdata_mg", "derive_data_mg.Rdata"))
tmp<- merge(merge(dm, dplyr::select(me, subjid, magnesium), by="subjid", all.x=TRUE), dplyr::select(cm, subjid, serotype), by = "subjid", all.x=TRUE)
